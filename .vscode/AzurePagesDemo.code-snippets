{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"WebsiteEnvironment outline": {
		"scope": "csharp",
		"prefix": "APD_01",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using Pulumi;",
			"",
			"namespace Infrastructure",
			"{",
			"    public class WebsiteEnvironment : Pulumi.ComponentResource",
			"    {",
			"        public WebsiteEnvironment(string name, ResourceArgs args, ComponentResourceOptions? options = null) ",
			"            : base(\"azurepagesdemo:resource:WebsiteEnvironment\", name, args, options)",
			"        {",
			"            $0",
			"            ",
			"            this.RegisterOutputs();",
			"        }",
			"    }",
			"}",
		],
		"description": "WebsiteEnvironment outline"
	},
	"WebsiteEnvironmentArgs outline": {
		"scope": "csharp",
		"prefix": "APD_02",
		"body": [
			"public class WebsiteEnvironmentArgs : ResourceArgs",
			"{",
			"    public Pulumi.Input<string> ResourceGroupName { get; set; } = \"\";",
			"}",
			"",
			""
		],
		"description": "WebsiteEnvironmentArgs"
	},
	"Add StorageAccountStaticWebSite": {
		"scope": "csharp",
		"prefix": "APD_03",
		"body": [
			"new Pulumi.AzureNative.Storage.StorageAccountStaticWebsite(name, new StorageAccountStaticWebsiteArgs {",
            "    AccountName = storageAccount.Name,",
            "    ResourceGroupName = args.ResourceGroupName,",
            "    Error404Document = \"404.html\",",
            "    IndexDocument = \"index.html\"",
            "}, new CustomResourceOptions { Parent = storageAccount });",
			"",
			"$0",
		],
		"description": "Add StorageAccountStaticWebSite"
	},
	"Create website environments": {
		"scope": "csharp",
		"prefix": "APD_04",
		"body": [
			"var stagingEnvironment = new Infrastructure.WebsiteEnvironment(Pulumi.Deployment.Instance.ProjectName + \"-Staging\", new Infrastructure.WebsiteEnvironmentArgs {",
			"    ResourceGroupName = resourceGroup.Name",
			"});",
			"var prodEnvironment = new Infrastructure.WebsiteEnvironment(Pulumi.Deployment.Instance.ProjectName, new Infrastructure.WebsiteEnvironmentArgs {",
			"    ResourceGroupName = resourceGroup.Name",
			"});",
			"$0"
		],
		"description": "Create website environments"
	},
	"Add CDN Profile": {
		"scope": "csharp",
		"prefix": "APD_05",
		"body": [
			"var cdnProfile =  new Pulumi.AzureNative.Cdn.Profile(name, new Pulumi.AzureNative.Cdn.ProfileArgs {",
            "    ProfileName = name,",
            "    ResourceGroupName = args.ResourceGroupName,",
            "    Sku = new Pulumi.AzureNative.Cdn.Inputs.SkuArgs {",
            "        Name = \"Standard_Microsoft\"",
            "    }",
            "}, new CustomResourceOptions { Parent = this });",
			"",
			"$0"
		],
		"description": "Add CDN Profile"
	},
	"Add CDN Endpoint": {
		"scope": "csharp",
		"prefix": "APD_06",
		"body": [
			"var hostname = \"$0TODO: FIGURE OUT!\";",
			"",
			"var endpoint = new Pulumi.AzureNative.Cdn.Endpoint(name, new Pulumi.AzureNative.Cdn.EndpointArgs",
            "{",
            "    EndpointName = name.ToLower(),",
            "    ResourceGroupName = args.ResourceGroupName,",
            "    ProfileName = cdnProfile.Name,",
            "    OriginHostHeader = hostname,",
            "    Origins = new List<Pulumi.AzureNative.Cdn.Inputs.DeepCreatedOriginArgs>",
            "    {",
            "        new Pulumi.AzureNative.Cdn.Inputs.DeepCreatedOriginArgs {",
            "            Name = \"blobstorage\",",
            "            HostName = hostname",
            "        }",
            "    },",
            "    DeliveryPolicy = new Pulumi.AzureNative.Cdn.Inputs.EndpointPropertiesUpdateParametersDeliveryPolicyArgs {",
            "        Rules = new List<Pulumi.AzureNative.Cdn.Inputs.DeliveryRuleArgs> {",
            "            new Pulumi.AzureNative.Cdn.Inputs.DeliveryRuleArgs {",
            "                Order = 0,",
            "                Name = \"CacheExpiration\",",
            "                Actions = new List<object> {",
            "                    new Pulumi.AzureNative.Cdn.Inputs.DeliveryRuleCacheExpirationActionArgs",
            "                    {",
            "                        Name = \"CacheExpiration\",",
            "                        Parameters = new Pulumi.AzureNative.Cdn.Inputs.CacheExpirationActionParametersArgs {",
            "                            CacheBehavior = args.CdnCacheDuration.HasValue ? \"Override\" : \"BypassCache\",",
            "                            CacheDuration = args.CdnCacheDuration.HasValue ? (Input<string>)args.CdnCacheDuration.Value.ToString() : null,",
            "                            CacheType = \"All\",",
            "                            OdataType = \"#Microsoft.Azure.Cdn.Models.DeliveryRuleCacheExpirationActionParameters\",",
            "                        }",
            "                    }",
            "                }",
            "            },",
            "            new Pulumi.AzureNative.Cdn.Inputs.DeliveryRuleArgs {",
            "                Order = 1,",
            "                Name = \"HttpToHttpsRedirect\",",
            "                Actions = new List<object> {",
            "                    new Pulumi.AzureNative.Cdn.Inputs.UrlRedirectActionArgs {",
            "                        Name = \"UrlRedirect\",",
            "                        Parameters = new Pulumi.AzureNative.Cdn.Inputs.UrlRedirectActionParametersArgs {",
            "                            DestinationProtocol = Pulumi.AzureNative.Cdn.DestinationProtocol.Https,",
            "                            RedirectType = Pulumi.AzureNative.Cdn.RedirectType.PermanentRedirect,",
            "                            OdataType = \"#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRedirectActionParameters\"",
            "                        }",
            "                    }",
            "                },",
            "                Conditions = new List<object> {",
            "                    new Pulumi.AzureNative.Cdn.Inputs.DeliveryRuleRequestSchemeConditionArgs {",
            "                        Name = \"RequestScheme\",",
            "                        Parameters = new Pulumi.AzureNative.Cdn.Inputs.RequestSchemeMatchConditionParametersArgs {",
            "                            MatchValues = new [] { \"HTTP\" },",
            "                            NegateCondition = false,",
            "                            Operator = \"Equal\",",
            "                            OdataType = \"#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestSchemeConditionParameters\"",
            "                        }",
            "                    }",
            "                }",
            "            }",
            "        }",
            "    }",
            "}, new CustomResourceOptions { Parent = cdnProfile });",
			""
		],
		"description": "Add CDN Endpoint"
	},
	"Add CName record": {
		"scope": "csharp",
		"prefix": "APD_07",
		"body": [
			"var cnameRecord = new Pulumi.AzureNative.Network.RecordSet(name, new Pulumi.AzureNative.Network.RecordSetArgs {",
            "    ResourceGroupName = \"DNS\",",
            "    ZoneName = \"zerokoll.com\",",
            "    RecordType = \"CNAME\",",
            "    CnameRecord = new Pulumi.AzureNative.Network.Inputs.CnameRecordArgs {",
            "        Cname = name.ToLower()",
            "    },",
            "    Ttl = 30,",
            "    TargetResource = new Pulumi.AzureNative.Network.Inputs.SubResourceArgs { Id = endpoint.Id }",
            "}, new CustomResourceOptions { Parent = endpoint });",
			"",
			"$0"
		],
		"description": "Add CName record"
	},
	"Add Custom domain": {
		"scope": "csharp",
		"prefix": "APD_08",
		"body": [
			"var customDomain = new Pulumi.AzureNative.Cdn.CustomDomain(name, new Pulumi.AzureNative.Cdn.CustomDomainArgs {",
            "    CustomDomainName = name.ToLower(),",
            "    HostName = name.ToLower() + \".zerokoll.com\",",
            "    ProfileName = cdnProfile.Name,",
            "    EndpointName = endpoint.Name,",
            "    ResourceGroupName = args.ResourceGroupName",
            "}, new CustomResourceOptions { Parent = cnameRecord });",
			"",
			"$0"
		],
		"description": "Add Custom domain"
	},
	"Enable SSL": {
		"scope": "csharp",
		"prefix": "APD_09",
		"body": [
			"new Pulumi.Command.Local.Command(name + \"-SslSetUp\", new Pulumi.Command.Local.CommandArgs {",
            "    Create = Output.Tuple(args.ResourceGroupName.ToOutput(), cdnProfile.Name, endpoint.Name, customDomain.Name)",
            "                            .Apply(names => $\"az cdn custom-domain enable-https -g {names.Item1} --profile-name {names.Item2} --endpoint-name {names.Item3} -n {names.Item4}\")",
            "}, new CustomResourceOptions { Parent = customDomain });",
			"",
			"$0"
		],
		"description": "Enable SSL"
	},
	"Add output pproperties to WebsiteEnvironment": {
		"scope": "csharp",
		"prefix": "APD_10",
		"body": [
			"public Output<string> Url { get; private set; }",
        	"public Output<string> AzCdnPurgeCommand { get; private set; }",
		],
		"description": "Add output pproperties to WebsiteEnvironment"
	},
	"Set AzCdnPurgeCommand": {
		"scope": "csharp",
		"prefix": "APD_11",
		"body": [
			"AzCdnPurgeCommand = Output.Tuple(args.ResourceGroupName.ToOutput(), endpoint.Name, cdnProfile.Name)",
            "        .Apply(names => $\"az cdn endpoint purge -g {names.Item1} -n {names.Item2} --profile-name {names.Item3} --content-paths /*\");",
		],
		"description": "Set AzCdnPurgeCommand"
	},
	"Add MyStack outputs": {
		"scope": "csharp",
		"prefix": "APD_12",
		"body": [
			"[Output]",
			"public Output<string> StagingUrl { get; set; }",
			"[Output]",
			"public Output<string> ProductionUrl { get; set; }",
			"[Output]",
			"public Output<string> AzProductionCdnPurgeCommand { get; set; }",
		],
		"description": "Add MyStack outputs"
	},
	"Add Azure pipeline outline": {
		"scope": "yaml",
		"prefix": "APD_01",
		"body": [
			"trigger:",
			"- master",
			"",
			"variables:",
			"  ProjectName: 'azurepagesdemo'",
			"",
			"stages:",
			"    - stage: build",
			"      displayName: \"Generate website\"",
			"      $0",
			"",
			"    - stage: releaseToStaging",
			"      displayName: \"Deploy site to staging\"",
			"",
			"    - stage: releaseToProduction",
			"      displayName: \"Deploy site to production\""
		],
		"description": "Add Azure pipeline outline"
	},
	"Add Azure pipeline build jobs": {
		"scope": "yaml",
		"prefix": "APD_02",
		"body": [
			"jobs:",
			"- job: runJekyll",
			"  displayName: \"Run Jekyll container\"",
			"  pool:",
			"    vmImage: 'ubuntu-latest'",
			"  steps:",
			"    $0"
		],
		"description": "Add Azure pipeline build jobs"
	},
	"Add Jekyll Docker command": {
		"scope": "yaml",
		"prefix": "APD_03",
		"body": [
			"- script: docker run -v \"$(Build.SourcesDirectory)/Site:/srv/jekyll/source\" -v \"$(Build.ArtifactStagingDirectory):/srv/jekyll/destination\" -e JEKYLL_ROOTLESS=true jekyll/jekyll jekyll build --source /srv/jekyll/source --destination /srv/jekyll/destination",
			"  displayName: \"Run Jekyll\"",
			"$0"
		],
		"description": "Add Jekyll Docker command"
	},
	"Add artifact publishing": {
		"scope": "yaml",
		"prefix": "APD_04",
		"body": [
			"",
			"- task: PublishBuildArtifacts@1",
			"  displayName: 'Publish generated site'",
			"  inputs:",
			"    PathtoPublish: '$(Build.ArtifactStagingDirectory)'",
			"    ArtifactName: 'site'",
			"    publishLocation: 'Container'$0"
		],
		"description": "Add artifact publishing"
	},
	"Add staging deployment jobs": {
		"scope": "yaml",
		"prefix": "APD_05",
		"body": [
			"jobs:",
			"- deployment: deployToStaging",
			"  displayName: \"Deploy to staging\"",
			"  pool:",
			"    vmImage: 'windows-latest'",
			"  environment: 'Staging'",
			"  strategy:",
			"    runOnce:",
			"      deploy:",
			"        steps:",
			"          $0"
		],
		"description": "Add staging deployment jobs"
	},
	"Add staging deployment file publish": {
		"scope": "yaml",
		"prefix": "APD_06",
		"body": [
			"- task: AzureFileCopy@3",
			"  displayName: 'Publish Site'",
			"  inputs:",
			"    SourcePath: '$(Pipeline.Workspace)/site'",
			"    azureSubscription: 'AzurePagesDemo'",
			"    Destination: AzureBlob",
			"    storage: '$(ProjectName)staging'",
		  	"    ContainerName: '\\$web'",
		],
		"description": "Add staging deployment file publish"
	},
	"Add production deployment jobs": {
		"scope": "yaml",
		"prefix": "APD_07",
		"body": [
			"jobs:",
			"- deployment: deployToProduction",
			"  displayName: \"Deploy to production\"",
			"  pool:",
			"    vmImage: 'windows-latest'",
			"  environment: 'Production'",
			"  strategy:",
			"    runOnce:",
			"      deploy:",
			"        steps:",
			"        - task: AzureFileCopy@3",
			"          displayName: 'Publish Site'",
			"          inputs:",
			"            SourcePath: '$(Pipeline.Workspace)/site'",
			"            azureSubscription: 'AzurePagesDemo'",
			"            Destination: AzureBlob",
			"            storage: '$(ProjectName)'",
			"            ContainerName: '\\$web'",
			"",
			"        - task: AzureCLI@1",
			"          displayName: 'Purge CDN'",
			"          inputs:",
			"            azureSubscription: 'AzurePagesDemo'",
			"            scriptLocation: inlineScript",
			"            inlineScript: '${1:CdnPurgeCommand}'$0",
		],
		"description": "Add production deployment jobs"
	},
	"Add function storage container": {
		"scope": "csharp",
		"prefix": "APD_13",
		"body": [
			"var functionsContainer = new Pulumi.AzureNative.Storage.BlobContainer(\"functions\", new Pulumi.AzureNative.Storage.BlobContainerArgs {",
			"    ContainerName = \"functions\",",
			"    ResourceGroupName = resourceGroup.Name,",
			"    AccountName = prodEnvironment.StorageAccount.Name,",
			"}, new CustomResourceOptions { Parent = prodEnvironment.StorageAccount });",
			"",
			""
		],
		"description": "Add function storage container"
	},
	"Add function code blob": {
		"scope": "csharp",
		"prefix": "APD_14",
		"body": [
			"var functionsBlob = new Pulumi.AzureNative.Storage.Blob(\"functions\", new Pulumi.AzureNative.Storage.BlobArgs {",
			"    BlobName = \"functions.zip\",",
			"    AccountName = prodEnvironment.StorageAccount.Name,",
			"    ResourceGroupName = resourceGroup.Name,",
			"    ContainerName = functionsContainer.Name,",
			"    Source = new Pulumi.FileArchive(\"../Functions\"),",
			"}, new CustomResourceOptions { Parent = functionsContainer });",
			"",
			""
		],
		"description": "Add function code blob"
	},
	"Add function app service": {
		"scope": "csharp",
		"prefix": "APD_15",
		"body": [
			"var functionsPlan = new Pulumi.AzureNative.Web.AppServicePlan(Pulumi.Deployment.Instance.ProjectName, new Pulumi.AzureNative.Web.AppServicePlanArgs {",
			"    Name = Pulumi.Deployment.Instance.ProjectName,",
			"    ResourceGroupName = resourceGroup.Name,",
			"    Sku = new Pulumi.AzureNative.Web.Inputs.SkuDescriptionArgs {",
			"        Name = \"Y1\",",
			"        Tier = \"Dynamic\",",
			"    }",
			"});",
			"",
			""
		],
		"description": "Add function app service"
	},
	"Add GetStorageConnectionString method": {
		"scope": "csharp",
		"prefix": "APD_16",
		"body": [
			"private Output<string> GetStorageConnectionString(ResourceGroup resourceGroup, Pulumi.AzureNative.Storage.StorageAccount account)",
			"{",
			"    var primaryStorageKey = Output.Tuple(resourceGroup.Name, account.Name).Apply(",
			"            x => Output.Create(Pulumi.AzureNative.Storage.ListStorageAccountKeys.InvokeAsync(",
			"                            new Pulumi.AzureNative.Storage.ListStorageAccountKeysArgs {",
			"                                ResourceGroupName = x.Item1,",
			"                                AccountName = x.Item2",
			"                            }).ContinueWith(x => x.Result.Keys[0].Value)",
			"            )",
			"    );",
			"",
			"    return Output.Tuple(account.Name, primaryStorageKey).Apply(x => $\"DefaultEndpointsProtocol=https;AccountName={x.Item1};AccountKey={x.Item2}\");",
			"}",
			"",
			""
		],
		"description": "Add GetStorageConnectionString method"
	},
	"Add GetCodeBlobUrl method": {
		"scope": "csharp",
		"prefix": "APD_17",
		"body": [
			"private Output<string> GetCodeBlobUrl(ResourceGroup resourceGroup, Pulumi.AzureNative.Storage.StorageAccount account, Pulumi.AzureNative.Storage.BlobContainer container, Pulumi.AzureNative.Storage.Blob blob)",
			"{",
			"    var blobSASServiceSasToken = Output.Tuple(resourceGroup.Name, account.Name, container.Name)",
			"            .Apply(x => Output.Create(Pulumi.AzureNative.Storage.ListStorageAccountServiceSAS.InvokeAsync(",
			"                            new Pulumi.AzureNative.Storage.ListStorageAccountServiceSASArgs {",
			"                                ResourceGroupName = x.Item1,",
			"                                AccountName = x.Item2,",
			"                                Protocols = Pulumi.AzureNative.Storage.HttpProtocol.Https,",
			"                                SharedAccessStartTime = System.DateTime.UtcNow.ToString(\"yyyy-MM-dd\"),",
			"                                SharedAccessExpiryTime = \"2030-01-01\",",
			"                                Resource = Pulumi.AzureNative.Storage.SignedResource.C,",
			"                                Permissions = Pulumi.AzureNative.Storage.Permissions.R,",
			"                                CanonicalizedResource = $\"/blob/{x.Item2}/{x.Item3}\"",
			"                            }",
			"                    ).ContinueWith(x => x.Result.ServiceSasToken)));",
			"",
			"    return Output.Tuple(account.Name, container.Name, blob.Name, blobSASServiceSasToken)",
			"                        .Apply(x => $\"https://{x.Item1}.blob.core.windows.net/{x.Item2}/{x.Item3}?{x.Item4}\");",
			"}",
			""
		],
		"description": "Add GetCodeBlobUrl method"
	},
	"Add function app": {
		"scope": "csharp",
		"prefix": "APD_18",
		"body": [
			"new Pulumi.AzureNative.Web.WebApp(Pulumi.Deployment.Instance.ProjectName, new Pulumi.AzureNative.Web.WebAppArgs {",
			"    Name = Pulumi.Deployment.Instance.ProjectName,",
			"    ResourceGroupName = resourceGroup.Name,",
			"    ServerFarmId = functionsPlan.Id,",
			"    Kind = \"functionapp\",",
			"    SiteConfig = new Pulumi.AzureNative.Web.Inputs.SiteConfigArgs {",
			"        AppSettings = new List<Pulumi.AzureNative.Web.Inputs.NameValuePairArgs> {",
			"            new Pulumi.AzureNative.Web.Inputs.NameValuePairArgs { ",
			"                Name = \"AzureWebJobsStorage\", ",
			"                Value = GetStorageConnectionString(resourceGroup, prodEnvironment.StorageAccount) ",
			"            },",
			"            new Pulumi.AzureNative.Web.Inputs.NameValuePairArgs { Name = \"FUNCTIONS_EXTENSION_VERSION\", Value = \"~3\" },",
			"            new Pulumi.AzureNative.Web.Inputs.NameValuePairArgs { Name = \"FUNCTIONS_WORKER_RUNTIME\", Value = \"node\" },",
			"            new Pulumi.AzureNative.Web.Inputs.NameValuePairArgs { Name = \"WEBSITE_NODE_DEFAULT_VERSION\", Value = \"~14\" },",
			"            new Pulumi.AzureNative.Web.Inputs.NameValuePairArgs { ",
			"                Name = \"WEBSITE_RUN_FROM_PACKAGE\", ",
			"                Value = GetCodeBlobUrl(resourceGroup, prodEnvironment.StorageAccount, functionsContainer , functionsBlob) ",
			"            }",
			"        },",
			"        ConnectionStrings = new List<Pulumi.AzureNative.Web.Inputs.ConnStringInfoArgs> {",
			"            new Pulumi.AzureNative.Web.Inputs.ConnStringInfoArgs { ",
			"                Name = \"STAGING\", ",
			"                Type = Pulumi.AzureNative.Web.ConnectionStringType.Custom, ",
			"                ConnectionString = GetStorageConnectionString(resourceGroup, stagingEnvironment.StorageAccount) ",
			"            },",
			"            new Pulumi.AzureNative.Web.Inputs.ConnStringInfoArgs { ",
			"                Name = \"PRODUCTION\", ",
			"                Type = Pulumi.AzureNative.Web.ConnectionStringType.Custom, ",
			"                ConnectionString = GetStorageConnectionString(resourceGroup, prodEnvironment.StorageAccount)",
			"            }",
			"        },",
			"        Http20Enabled = true,",
			"        NodeVersion = \"~14\",",
			"        Cors = new Pulumi.AzureNative.Web.Inputs.CorsSettingsArgs {",
			"            AllowedOrigins = new[] { StagingUrl.Apply(x => x.TrimEnd('/')), ProductionUrl.Apply(x => x.TrimEnd('/')) }",
			"        }",
			"    },",
			"}, new CustomResourceOptions { Parent = functionsPlan });",
		],
		"description": "Add function app"
	},
	"Add comments form": {
		"scope": "html",
		"prefix": "APD_01",
		"body": [
			"$0",
			"<section class=\"post-full-content comments\">",
			"    <h2>Comments</h2>",
			"    <div id=\"comments\"></div>",
			"    <form id=\"commentForm\">",
			"        <div>",
			"            <label>Name:</label>",
			"            <input type=\"text\" id=\"txtName\">",
			"        </div>",
			"        <div>",
			"            <label>Comment:</label>",
			"            <textarea id=\"txtComment\"></textarea>",
			"        </div>",
			"        <div>",
			"            <button id=\"btnSubmit\">Submit</button>",
			"        </div>",
			"    </form>",
			"    <div class=\"loading\">Loading comments...</div>",
			"    <div id=\"thankYou\">Thank you for your comment!</div>",
			"</section>"
		],
		"description": "Add comments form"
	},
	"Add comments form styling": {
		"scope": "html",
		"prefix": "APD_02",
		"body": [
			"<style>",
			"    .post-full-content.comments {",
			"        padding-top: 20px;",
			"        min-height: auto;",
			"    }",
			"    .post-full-content.comments form {",
			"        display:none;",
			"    }",
			"    .post-full-content.comments form textarea,",
			"    .post-full-content.comments form input[type=text] {",
			"        width: 100%;",
			"        margin-bottom: 10px;",
			"        padding: 5px 10px;",
			"    }",
			"    .post-full-content.comments form button {",
			"        float: right;",
			"    }",
			"    .post-full-content.comments form:after {",
			"        content: \"\";",
			"        clear: both;",
			"        display: table;",
			"    }",
			"    .post-full-content.comments .loading {",
			"        margin-top: 20px;",
			"        font-size: 80%;",
			"        font-style: italic;",
			"        text-align: center;",
			"    }",
			"    .post-full-content.comments #thankYou {",
			"        display: none;",
			"        border: 1px solid green;",
			"        background-color: lightgreen;",
			"        color: green;",
			"        padding: 20px;",
			"        margin: 20px 0;",
			"        text-align: center;",
			"    }",
			"    .post-full-content.comments:after,",
			"    .post-full-content.comments:before {",
			"        content: none;",
			"    }",
			"    section.comment {",
			"        margin-bottom: 20px;",
			"        border-bottom: 1px solid gray;",
			"        padding: 20px;",
			"        padding-top: 0;",
			"    }",
			"    section.comment header {",
			"        font-size: 80%;",
			"    }",
			"    section.comment main {",
			"        margin: 5px 0;",
			"    }",
			"    section.comment footer {",
			"        font-size: 90%;",
			"    }",
			"</style>"
		],
		"description": "Add comments form styling"
	},
	"Add JavaScript": {
		"scope": "html",
		"prefix": "APD_03",
		"body": [
			"",
			"<script src=\"https://polyfill.io/v3/polyfill.min.js?features=fetch\"></script>",
			"<script>",
			"    var pageId = \"{{page.url | remove_first: '/'}}\";",
			"    var endpoint = \"https://azurepagesdemo.azurewebsites.net/comments/\"",
			"    $0",
			"</script>"
		],
		"description": "Add JavaScript"
	},
	"Fetch comments": {
		"scope": "javascript",
		"prefix": "APD_01",
		"body": [
			"",
			"fetch(endpoint + \"?postId=\" + pageId).then(function(response) {",
			"    response.json().then(function(comments) {",
			"        document.querySelector(\".loading\").remove();",
			"        document.getElementById(\"commentForm\").style.display = \"block\";",
			"        comments.forEach(addComment);",
			"    })",
			"});",
			"$0"
		],
		"description": "Fetch comments"
	},
	"Render comments": {
		"scope": "javascript",
		"prefix": "APD_02",
		"body": [
			"",
			"var commentsContainer = document.getElementById(\"comments\")",
			"function addComment(comment) {",
			"    var el = document.createElement(\"section\");",
			"    el.classList.add(\"comment\");",
			"    el.innerHTML =  \"<header>\" + new Date(comment.timestamp).toISOString().slice(0,19).replace(\"T\",\" \") + \"</header>\" + ",
			"                    \"<main>\" + htmlEncode(comment.body) + \"</main>\" + ",
			"                    \"<footer>- \" + htmlEncode(comment.commenter) + \"</footer>\";",
			"    commentsContainer.insertBefore(el, commentsContainer.firstChild);",
			"}",
			"",
			"function htmlEncode(html) {",
			"    return html.replace(/[\\u00A0-\\u9999<>\\&]/gim, function (i) {",
			"        return '&#' + i.charCodeAt(0) + ';';",
			"    });",
			"}",
			"$0"
		],
		"description": "Render comments"
	},
	"Add comment": {
		"scope": "javascript",
		"prefix": "APD_03",
		"body": [
			"",
			"document.getElementById(\"commentForm\").addEventListener(\"submit\", function(event) {",
			"    event.preventDefault();",
			"    disableForm();",
			"",
			"    fetch(endpoint, {",
			"        method: 'post',",
			"        body: JSON.stringify({",
			"            \"postId\": pageId,",
			"            \"body\": document.getElementById(\"txtComment\").value,",
			"            \"commenter\": document.getElementById(\"txtName\").value,",
			"        })",
			"    }).then(function(response) {",
			"        if (!response.ok) {",
			"            alert(\"Failed to add comment\");",
			"        }",
			"        document.getElementById(\"commentForm\").style.display = \"none\";",
			"        document.getElementById(\"thankYou\").style.display = \"block\";",
			"        response.json().then(addComment);",
			"    });",
			"});",
			"",
			"function disableForm() {",
			"    document.getElementById(\"txtName\").disabled = true;",
			"    document.getElementById(\"txtComment\").disabled = true;",
			"    document.getElementById(\"btnSubmit\").disabled = true;",
			"    document.getElementById(\"btnSubmit\").innerText = \"Adding...\";",
			"}",
		],
		"description": "Add comment"
	}
}